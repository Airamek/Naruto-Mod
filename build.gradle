buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/groups/public"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT"
    }
}
apply plugin: "forge"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8 // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

version = getModVersion("version")
group = "sekwah.mods.narutomod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "narutomod"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    //mappings = "stable_12" //TODO uncomment for mappings, yay!
    if (project.hasProperty("runDir")) {
        runDir = project.runDir
    } else if (file("../run").exists()) {
        runDir = "../ run"
    } else if (file("run").exists()) {
        runDir = "run"
    } else {
        runDir = "eclipse"
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption("Xdoclint:none", "-quiet")
        }
    }
}

jar {
    manifest.mainAttributes("Main-Class": "com.nextgencrafters.narutomodinstaller.Loader")
}

task devJar(type: Jar) {
    from sourceSets.main.output
    description "Creates a compiled version for other developers to use in their workspaces."
    classifier = "dev"
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    description "Outputs the source code into a jar file."
    classifier = "src"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    description "Creates a Javadoc Jar"
    classifier = "javadoc"
}

tasks.build.dependsOn devJar, sourceJar, javadocJar

String getModVersion(String type) {
    File file = sourceSets.main.java.filter { File f -> f.file }.filter { File element ->
        element.readLines("UTF-8").each { String s ->
            if (s.trim().startsWith("@Mod")) {
                return "src/main/java/$element.path"
            }
        }
    }.first()
    String major = "0"
    String revision = "1"
    String patch = "0"
    String prefix = "public static final String $type = \""
    file.readLines("UTF-8").each { String s ->
        s = s.trim()
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2)
            String[] pts = s.split("\\.")

            major = pts[0]
            revision = pts[1]
            patch = pts[2]
        }
    }
    return "$major.$revision.$patch"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcVersion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcVersion
        expand "version": project.version, "mcVersion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}
