buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://repo.spongepowered.org/maven" }
        maven { url = "https://maven.sekwah.com" }
        maven {url "https://plugins.gradle.org/m2/"}
        // Only temporary
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
        classpath "com.wynprice.cursemaven:CurseMaven:2.1.1"
        classpath "com.discord4j:discord4j-core:3.1.3"
    }
}
plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

import discord4j.core.DiscordClient;
import discord4j.core.GatewayDiscordClient;
import discord4j.common.util.Snowflake
import discord4j.core.object.entity.channel.TextChannel;

apply plugin: 'net.minecraftforge.gradle'
apply plugin: "java"
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

// May be able to remove it
apply plugin: "org.spongepowered.mixin"
apply plugin: "com.wynprice.cursemaven"

def branch = System.getenv("BRANCH");
def isDevBranch = !(branch && branch.startsWith("refs/heads/release-"));

version = "${project.version}${isDevBranch ? '-dev' : ''}"
group = project.package // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.archive

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        url "https://minecraft.curseforge.com/api/maven/"
    }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: project.minecraft_version

    // This is for personal local tests i was doing ignore it ;)
    //mappings channel: 'snapshot', version: '20200706-unofficialtest-1.16.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                "${project.modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                "${project.modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', project.modid, '--all', '--output', file('src/generated/resources/')

            mods {
                "${project.modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    include {
        compile.extendsFrom(include)
    }
    includePlusMeta {
        include.extendsFrom(includePlusMeta)
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:' + "${project.minecraft_version}-${project.forge_version}"

    //compile "com.sekwah:SekCLib:${sekclib_version}:deobf"
    compile "com.discord4j:discord4j-core:3.1.3"

    // compile fg.deobf("curse.maven:neat:${project.neat_fileid}")

    // compile fg.deobf("curse.maven:hwyla:${project.hwyla_fileid}")

    //include('org.ow2.asm:asm-debug-all:5.2')

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

mixin {
    add sourceSets.main, "mixins.${project.modid}.json"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    finalizedBy 'reobfJar'
    classifier = 'universal'
    manifest {
        attributes([
                "Specification-Title": project.modid,
                "Specification-Vendor": project.vendor,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${getArchiveVersion()}",
                "Implementation-Vendor" :project.vendor,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "mixins.${project.modid}.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

/** For pre-releases and testers to be able to try the latest commits if they want.
 * If the builds start exceeding 8MB then we may want to upload to s3 instead and periodically clear.
 * TODO possibly add a task that announces when builds are made?
 * Though add a note that it may take a while for Curse to approve the files.
 */
task discordupload {
    dependsOn(jar)
    doLast {
        String discordToken = System.getenv("DISCORD_TOKEN");
        if(discordToken != null) {
            println("Logging Into Discord")
            DiscordClient client = DiscordClient.create(discordToken)
            final GatewayDiscordClient gateway = client.login().block();
            ((TextChannel) gateway.getChannelById(Snowflake.of(project.discord_testing_channel)).block())
                    .createMessage({messageSpec ->
                        // Get commit message or something or maybe info from the changelog.
                        messageSpec.content = "This is an automated test build.\n\n" +
                                "Current Features: https://github.com/sekwah41/Naruto-Mod/blob/${branch.replace("refs/heads/","")}/CHANGELOG.md"
                        messageSpec.addFile(jar.archiveName, file(jar.archiveFile).newInputStream())
                        return messageSpec
                    }).block();
            println("Posted build")

        } else {
            println("Discord token unspecified")
        }
    }
}

tasks.curseforge.enabled = System.getenv("CURSE_API") != null

curseforge {
    logger.info("Curse api: " + System.getenv("CURSE_API"))
    if (System.getenv("CURSE_API") != null) {
        apiKey = System.getenv("CURSE_API")
    }
    project {
        id = '342729'
        // TODO add code to reference this but also cut the latest change logs in for the files
        changelog = '''https://github.com/sekwah41/Naruto-Mod/blob/release-forge-1.16/CHANGELOG.md'''
        changelogType = 'markdown'
        releaseType = 'beta'
        addGameVersion '1.16.1'
        addGameVersion '1.16.2'
        addGameVersion '1.16.3'
        addGameVersion '1.16.4'
        addGameVersion '1.16.5'

        mainArtifact(jar){

        }
        //addArtifact sourcesJar
        //addArtifact deobfJar
        //addArtifact javadocJar
    }
}
